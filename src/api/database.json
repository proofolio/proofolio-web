{
  "SECTIONS": {
    "homepage": [
      {
        "sectionTitle": "UserIntro",
        "sectionIcon": "😊"
      },
      {
        "sectionTitle": "ProjectBrief",
        "sectionIcon": "🗄️"
      },
      {
        "sectionTitle": "BlogBrief",
        "sectionIcon": "✍️"
      }
    ],
    "resumepage": [
      {
        "sectionTitle": "education",
        "sectionIcon": "🏫"
      },
      { "sectionTitle": "Skills", "sectionIcon": "💯" },
      {
        "sectionTitle": "Language",
        "sectionIcon": "🔤"
      },
      {
        "sectionTitle": "Experience",
        "sectionIcon": "💼"
      }
    ],
    "blogpage": [
      {
        "sectionTitle": "Programming Languages",
        "sectionIcon": "❄️"
      },
      {
        "sectionTitle": "Web Development",
        "sectionIcon": "❄️"
      },
      {
        "sectionTitle": "Development Tools",
        "sectionIcon": "❄️"
      },
      {
        "sectionTitle": "React",
        "sectionIcon": "❄️"
      }
    ]
  },
  "USER_INFO": {
    "name": "Daphne",
    "logo": "https://d1gzlmcs77uyca.cloudfront.net/logo/logo_d.png",
    "jobTitle": "Frontend Developer",
    "headShotUrl": "https://d1gzlmcs77uyca.cloudfront.net/personal/headshot.png",
    "aboutMe": "Armed with a proficiency in modern frontend technologies honed through intensive boot camp training,  I am adept at translating design concepts into responsive and user-friendly interfaces.  My background in business administration and education instilled in me a strong foundation in problem-solving and adaptability, traits essential for navigating the dynamic landscape of web development.",
    "techStack": [
      "HTML",
      "CSS",
      "JavaScript",
      "TypeScript",
      "React",
      "MaterialUI",
      "Sass",
      "Redux",
      "ChromeExtension",
      "git",
      "GithubActions",
      "npm"
    ],
    "backupPictures": [
      "https://d1gzlmcs77uyca.cloudfront.net/personal/bgimage1.jpg",
      "https://d1gzlmcs77uyca.cloudfront.net/personal/bgimage2.jpg",
      "https://d1gzlmcs77uyca.cloudfront.net/personal/bgimage3.jpg",
      "https://d1gzlmcs77uyca.cloudfront.net/personal/bgimage4.jpg"
    ],
    "contactInfo": {
      "linkedin": "https://www.linkedin.com/in/daphne-hsueh",
      "github": "https://github.com/Daphne-Hsueh  ",
      "email": "daphnewk23@gmail.com   ",
      "phone": "+886 933 356 358 "
    }
  },
  "PROJECT_BRIEF": [
    {
      "projectId": 1,
      "projectTitle": "TabColab",
      "projectTechStack": ["React", "ChromeExtension", "Sass", "OAuth2"],
      "projectIntro": "Chrome Extension for Enhanced Tab Management. A powerful Chrome extension designed to revolutionize the way you manage your browser tabs. With TabColab, you can effortlessly group tabs by dragging, add detailed notes, and manage your todos directly from your browser.  ",
      "projectDetail": "# Project Functions \n **1. Tab Grouping**\n\n- Drag to Group: Easily group your tabs by dragging them together. This visual approach helps you organize tabs into categories or projects, enhancing your workflow and focus.\\n- Manage Groups: Rename, chose group Icon, or dissolve groups as your project needs evolve.\n\n**2. Notes and Todos**\n\n- Add Notes: add a new note or todo at the end of your desired group, to keep track of important information or quick reminders.\n- Manage Todos: Create, check off, and delete todos related to specific tabs or projects. Keep your task list integrated with your browsing. \n\n**3. Popup Interface**\n\n- Quick Access: Use the popup to quickly add new tabs and new notes to existing groups, adding a note without leaving your current context.\n- Seamless Integration: The popup interface integrates smoothly with your browsing, providing a natural and intuitive tool for managing your tabs, notes.\n\n**4. Search Functionality**\n\n- Search Tab: Quickly locate any open tab with a powerful search feature that filters tabs by their title or URL, making it easier to manage large numbers of tabs.\n\n**5. Theme customization**\n\n- Dark and Light Modes: Toggle between dark and light themes to customize the appearance of your extension interface according to your preference or ambient lighting conditions.\n\n**6. Google OAuth Sign-In**\n\n- Personalized Experience: Sign in with your Google account to synchronize your tab groups, notes, and todos across all your devices. This ensures a seamless experience no matter where you access your browser. \n\n# Develop Notes \n\n - **JWT- payload**\n\n  ```tsx\n  {\n    \\\"user_id\\\": \\\"8d3fc75d-1d79-4b27-a27d-fb612cf437d8\\\",\n    \\\"email\\\": \\\"daphnewk23@gmail.com\\\",\n    \\\"version\\\": \\\"v1.0\\\",\n    \\\"iat\\\": 1714314052,\n    \\\"exp\\\": 1714918852\n  }\n  ```\n\n- **Why use local storage to store JWT**\n  - Extension-Specific Security Context: Because it's a Chrome extension, the environment is less susceptible to malicious scripts stealing tokens, as extension pages (background script) are isolated from web pages. With the latest version of the manifest enhancing security features and limitations on what resources can be loaded or executed, this framework inherently reduces the risk of XSS attacks significantly.\n  - Using local storage avoids constant communication with the backend, enhancing performance.\n- **OAuth challenges**\n  - Initially handled by the backend with the Passport package: Passport redirects to the Google login page, post-login navigates back to the callback URL to retrieve the accessToken, which internally is used to fetch the user profile. If the user is not in the database, create user data and generate JWT; if present, just generate JWT and route the JWT to /google/token.\n  - Utilizing the PKCE method.\n  - **`chrome.identity.launchWebAuthFlow()`**\n- **Manifest function**: Includes information about the software version, the environment it runs in, dependencies it requires, and permissions it needs, among other data.\n- **Google API**\n  - **`chrome.runtime.onConnect.addListener`** event listener\n  - Set event names **`console.assert([port.name](http://port.name/) === \\\"tabsUpdate\\\");`**\n  - **`port.onDisconnect.addListener`** for cleanup when the connection is closed, removing all event listeners added to the tabs. This is crucial for preventing performance issues due to \\\"zombie\\\" listeners that keep running even after they are no longer needed.\n  - **chrome.runtime** provides mechanisms for internal communication, initialization, and lifecycle management. This API helps ensure that the extension behaves as an integrated part of the Chrome browser, with capabilities to interact seamlessly across its different components.\n    - Messaging\n      - **`chrome.runtime.sendMessage`** and **`chrome.runtime.onMessage`**: Used for sending messages between background scripts, content scripts, and other extension pages. This can be useful for passing data and commands between different components.\n      - **`chrome.runtime.connect`** and **`chrome.runtime.onConnect`**: Used to create a more persistent communication channel between components, which can be useful for continuous data exchange or state monitoring.\n    - Event Handling\n      - **`chrome.runtime.onInstalled`**: Triggered when the extension is first installed, when it's updated to a new version, or when Chrome updates.\n      - **`chrome.runtime.onStartup`**: Fired when the browser starts up and the extension is already installed. This allows the extension to initialize itself at startup.\n      - **`chrome.runtime.onSuspend`** and **`chrome.runtime.onSuspendCanceled`**: Handle the unloading of an extension due to browser shutdown or extension reloading.\n    - Identity, Error Handling, Update Management…\n- **Popup and index.html communication**\n  - Using two HTML files: In a Chrome extension, each HTML file you use generally creates a new browsing context, such as a popup or a new tab. This means that when you use **`index.html`** and **`popup.html`** in your Chrome extension and both load the same **`main.jsx`** script, they do not automatically share the same runtime context or state even though they use the same script file.\n  - Solution for managing shared data:\n    1. Chrome Storage API (includes local storage, sync storage)\n    2. Messaging API \n    3. Event Pages or Background Scripts\n    4. Broadcasting Changes\n    5. Use Observables or Similar Patterns\n- **DragDrop**\n  - handleDragStart\n    - **`e.dataTransfer.setData(\\\"itemId\\\", itemId);`** Set which item (itemId) & from where to start dragging (originGroupId)\n    - **`e.dataTransfer.effectAllowed = \\\"move\\\"`;** Specify that the operation is a move, at the same time preventing other operations.\n  - handlerDragOver\n    - **`e.preventDefault()`**; necessary to allow dropping\n    - **`e.dataTransfer.dropEffect = \\\"move\\\"`;** Indicates to the user that a drag is in progress\n  - handleDrop\n    - **`onDrop={(e) => handleDrop(e, group.group_id)}`** Find out the targetGroup\n    - Update state on the backend and frontend\n\n---\n\nreference\n\n- https://developer.chrome.com/docs/extensions/reference/api\n- https://pjchender.dev/chrome-extension/chrome-extension-api/",

      "demoUrl": "https://chromewebstore.google.com/detail/tabcolab/pkigikdacbladbiakamiecjjcdakagha?pli=1",
      "demoVideo": "https://d1gzlmcs77uyca.cloudfront.net/demos/TabcolabDemo.mp4",
      "projectGithub": "https://github.com/SideProjectAC/tab-frontend",
      "featureList": [
        "- Group tabs and notes via **drag-and-drop** functionality, also leverage the **Google Extensions API** to automatically detect tab movements ",
        "- Implemented dual authentication mechanisms: JWT login and **Google OAuth** with PKCE",
        "- Integrated **Skeleton screen** to provide immediate feedback through placeholder elements, and dynamically adjusting to selected **dark/light theme** with **Sass**.",
        "- Applied **Responsive Web Design (RWD)** techniques to guarantee seamless UI across various desktop monitors"
      ]
    },

    {
      "projectId": 3,
      "projectTitle": "2048Game",
      "projectTechStack": ["JavaScript", "Redux", "Firebase"],
      "projectIntro": " The classic 2048 puzzle game that challenges players to combine numbered tiles to reach the elusive 2048 tile. Implemented Redux for state management and Firebase for deployment.",

      "projectDetail": " # Develop Notes \n\n- **Game logic**\n  - **Two-dimensional array**: Use rows and columns to set rules of the game.\n    - **Error**: Remember to include 'tiles that have been flipped' in the evaluation process, even if they are 0.\n- **State management**\n  - **Record board state**: Track which tiles are 0 and which have numbers.\n  - **UseContext** → Control all tiles.\n\n    ```\n    const board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n      ]\n    ```\n\n  - **Redux Toolkit**\n    - **Basic concept**:\n      - **State**: Variables and state.\n      - **Action**: Call to change state (trigger).\n      - **Reducer**: Actually perform the update.\n    - **Setup**:\n      - **store.js** → configureStore\n        - **Reducers**\n      - **index.js** → provider store = store\n    - **Slice**:\n      - In Redux Toolkit → Define state, reducers, action all in `createSlice`.\n      - **Example**: increment\n        - Increment by one: `state.count +=1`\n        - Add specific amount: `state.count += action.payload` (action is variable to pass in as payload)\n    - **In component**:\n      - **useReducer**: from ‘react-redux’; tell React I want to read this variable from this reducer.\n      - **useDispatch**: Call action from reducers.\n    - **Application issues**:\n      - Cannot directly modify the original state → Make a deep copy first.\n      - After dispatching, you cannot immediately get the latest state.\n        - [React Redux Fast Update State](https://stackoverflow.com/questions/71139700/react-redux-fast-update-state)\n    - **Score** → Since immediate reaction is not necessary, manage state using Redux.\n    - **Board** → Because you cannot get the latest state immediately after dispatching, use context.\n\n    ### **Advantages of Using Redux**\n\n    1. **Centralized State Management**: Redux provides a central store for state that can help manage the game state transparently across different components and layers of your application.\n    2. **Debugging and DevTools**: Redux’s DevTools are powerful for tracking state changes over time, which can be very helpful for debugging game logic and UI issues.\n    3. **Predictable State Updates**: Redux enforces a unidirectional data flow, which can make the state transitions in your game predictable and easier to understand and maintain.\n    4. **Time Travel**: Redux allows you to implement time-travel features quite easily, which can be a fun and useful feature in a game like 2048. It allows players to undo moves and see previous states of the game.\n\n    ### **Disadvantages of Using Redux**\n\n    1. **Boilerplate and Complexity**: Redux can introduce a significant amount of boilerplate code, which might complicate your project unnecessarily, especially if the game's logic isn't complex enough to justify it.\n    2. **Performance Considerations**: While Redux itself is quite fast, the frequent updates associated with game state management can lead to performance bottlenecks, especially if not implemented carefully. Every move in 2048 results in multiple state updates, and if these are not handled efficiently, it can lead to slow rendering and poor user experience.\n    3. **Overhead of Learning and Setup**: If you or your team are not already familiar with Redux, there can be a learning curve that might slow down development initially.\n- **Firebase**\n  - **Basic process**: [How to deploy a React app with Firebase](https://www.freecodecamp.org/news/how-to-deploy-a-react-app-with-firebase/)\n  - **Encountered issue**: **Resolving EACCES permissions errors when installing packages globally** → [NPM Docs on EACCES errors](https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally)",
      "demoVideo": "https://d1gzlmcs77uyca.cloudfront.net/demos/2048Demo.mp4",
      "demoUrl": "https://game-4337e.web.app/",
      "projectGithub": "https://github.com/Daphne-Hsueh/2048game",
      "featureList": [
        "- Developed a **fully interactive** version of the popular 2048 game, utilizing JavaScript and HTML5 to create a smooth and responsive user experience.",
        "- Integrated **Redux** for  state management, ensuring seamless game dynamics and consistent user experiences ",
        "- Implemented core game mechanics such as **tile merging and movement algorithms**, focusing on fluid gameplay and intuitive user interactions",
        "- Deployed the game using **Firebase**, providing a reliable and scalable platform for hosting and serving the game to users"
      ]
    },
    {
      "projectId": 2,
      "projectTitle": "BucketList",
      "projectTechStack": ["TypeScript", "React", "CSS"],
      "projectIntro": "Embark on a journey of personal growth, adventure, and accomplishment as you create your ultimate bucket list. ",

      "projectDetail": " # Project Functions \n\n - Add tasks: Users can add new tasks to their bucket list by clicking the \"Go\" button or pressing Enter.\n- Edit tasks: Users can edit existing tasks to modify their content.\n- Delete tasks: Users can delete tasks they no longer wish to keep on their bucket list.\n- Mark tasks as done: Users can mark tasks as done, moving them from the \"Go Big or Go Home\" section to the \"Mission Complete\" section.\n- **Confetti effect**: Clicking the check button in the \"Mission Complete\" section triggers a confetti effect.\n- **Responsive design:** The app is built using TypeScript and features Responsive Web Design (RWD) to ensure compatibility across various devices and screen sizes.",
      "demoVideo": "https://d1gzlmcs77uyca.cloudfront.net/demos/bucketDemo.mp4",
      "demoUrl": "https://daphne-hsueh.github.io/bucket-list/",
      "projectGithub": "https://github.com/Daphne-Hsueh/bucket-list",
      "featureList": [
        "- Developed a **dynamic bucket list management** app allowing users to easily add, edit, and delete items on their bucket list via intuitive controls like a Go button or keyboard input.",
        "- Enhanced user experience by enabling tasks to be marked as completed, automatically moving them to the Mission Complete section with a celebratory **confetti effect**",
        "- Implemented **responsive design** , ensuring seamless functionality across different devices and screen sizes",
        "- Focused on **user interaction**, the app features visually engaging transitions and effects, improving engagement and satisfaction for users."
      ]
    },
    {
      "projectId": 4,
      "projectTitle": "Proofolio",
      "projectTechStack": ["TypeScript", "React", "MaterialUI"],
      "projectIntro": "A personal website all about ME! (or any other users)",
      "projectDetail": "# Develop Notes \n\n coming up soon :) ",
      "demoUrl": "https://www.proofolio.site/",
      "demoVideo": "https://d1gzlmcs77uyca.cloudfront.net/demos/ProofolioDemo.mp4",
      "projectGithub": "https://github.com/proofolio/proofolio-web",
      "featureList": [
        "- Showcasing projects, resume,  study blog, and contact page, implemented with **React Router** for navigation",
        "- Managed static assets on **AWS S3** and distributed them via CloudFront for high availability and fast delivery",
        "- Implemented **RWD** and Skeleton screen to enhance user experience.",
        "- Automated deployment using **GitHub Actions**"
      ]
    }
  ],
  "BLOG_BRIEF": [
    {
      "blogId": 1,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Programming Languages",
      "blogTitle": "TypeScript",
      "thumbnail": "https://picsum.photos/id/1/200/300",
      "heartNum": 2
    },
    {
      "blogId": 2,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Programming Languages",
      "blogTitle": "JS Basics - data types",
      "thumbnail": "https://picsum.photos/id/2/200/300",
      "heartNum": 2
    },
    {
      "blogId": 3,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Programming Languages",
      "blogTitle": "JS Basics - Promise",
      "thumbnail": "https://picsum.photos/id/3/200/300",
      "heartNum": 3
    },
    {
      "blogId": 4,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Web Development",
      "blogTitle": "JWT",
      "thumbnail": "https://picsum.photos/id/4/200/300",
      "heartNum": 0
    },
    {
      "blogId": 5,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Web Development",
      "blogTitle": "OAuth",
      "thumbnail": "https://picsum.photos/id/5/200/300",
      "heartNum": 2
    },
    {
      "blogId": 6,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Development Tools",
      "blogTitle": "Vite",
      "thumbnail": "https://picsum.photos/id/6/200/300",
      "heartNum": 2
    },
    {
      "blogId": 7,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "React",
      "blogTitle": "React Hooks",
      "thumbnail": "https://picsum.photos/id/7/200/300",
      "heartNum": 2
    }
  ],
  "RESUME": {
    "intro": {
      "username": "Daphne Hsueh",
      "aboutMe": "Innovative **Junior Frontend Developer** with a passion for crafting **immersive digital experiences**. Equipped with proficiency in modern frontend technologies such as HTML5, CSS3, JavaScript, TypeScript and frameworks like React.js, I am adept at translating design concepts into responsive and user-friendly interfaces. With a keen eye for detail and a commitment to staying abreast of industry trends, I am driven to deliver solutions that not only meet but **exceed expectations**.\n\nEager to contribute my skills and enthusiasm to a collaborative team environment, I am ready to embark on a journey of continuous learning and growth in the ever-evolving field of frontend development. \n\n**Let's build something remarkable together!**",
      "updatedDate": "2024.May.09",
      "fullResume": "https://d1gzlmcs77uyca.cloudfront.net/personal/Daphne%20Hsueh.pdf"
    },
    "diploma": [
      {
        "alphaCamp": "https://d1gzlmcs77uyca.cloudfront.net/personal/alpha_certificate.png"
      },
      {
        "chinese": "https://d1gzlmcs77uyca.cloudfront.net/personal/diploma_ch.jpg"
      },
      {
        "english": "https://d1gzlmcs77uyca.cloudfront.net/personal/dipolma_en.jpg"
      }
    ],
    "skills": [
      {
        "skillType": "Programming Languages",
        "skillTitle": ["HTML", "CSS", "JavaScript", "TypeScript"]
      },
      {
        "skillType": "Frameworks / Libraries / User Interface",
        "skillTitle": [
          "React",
          "Material-UI",
          "Sass",
          "React Router",
          "Redux",
          "Responsive Web Design (RWD)"
        ]
      },
      {
        "skillType": "Development Tools",
        "skillTitle": ["Git", "GitHub Actions", "AWS S3", "CloudFront", "npm"]
      },
      {
        "skillType": "Web Development Concepts",
        "skillTitle": [
          "Single Page Applications (SPA)",
          "RESTful API Integration"
        ]
      }
    ],
    "languages": [
      {
        "languageName": "Mandarin",
        "proficiency": "Native speaker"
      },
      {
        "languageName": "English",
        "proficiency": "Advanced ( TOEFL : 106 ) "
      },
      {
        "languageName": "Taiwanese",
        "proficiency": "Advanced"
      }
    ],
    "educations": [
      {
        "schoolName": "Alpha Camp",
        "schoolLogo": "https://d1gzlmcs77uyca.cloudfront.net/orgs/alphaCamp.png",
        "degree": " FullStack Developer Bootcamp: Frontend Specialization",
        "timeLine": "Nov 2023 - April 2024",
        "gpa": "3"
      },
      {
        "schoolName": "Masstrict University, NL",
        "schoolLogo": "https://d1gzlmcs77uyca.cloudfront.net/orgs/MU.png",
        "degree": " School of Business and Economic : Exchange Student",
        "timeLine": "Aug 2022 - Jan 2023",
        "gpa": "number"
      },
      {
        "schoolName": "National Cheng-Chi University, TW",
        "schoolLogo": "https://d1gzlmcs77uyca.cloudfront.net/orgs/NCCU.jpeg",
        "degree": " Bachelor of Education｜Bachelor of Business Administration ",
        "timeLine": "Sep 2018 - Jan 2023",
        "gpa": ""
      }
    ],
    "experiences": [
      {
        "companyName": "Alpha Camp",
        "industry": "Tech, Education",
        "companyLogo": "https://avatars.githubusercontent.com/u/8667311?s=280&v=4",
        "jobTitle": "Frontend Developer",
        "timeLine": "Nov.2023 ~ April.2024",
        "jobIntro": "- Completed a rigorous **4-month training program** in frontend development, successfully delivered 22+ small-scale side projects, dedicating over 50 hours weekly to mastering new skills. \n\n -  Completed 2 **large-scale projects** with a team of frontend and backend developers, utilized Git for version control and collaboration, enhancing teamwork with other developers and ensuring efficient workflow management. \n\n - Actively participated in online speeches and workshops to advance my technical knowledge and soft skills, preparing for a **professional software engineering** career."
      },
      {
        "companyName": "Anke Media Corp",
        "industry": "Long-Term Care , Media",
        "companyLogo": "https://www.ankecare.com/assets/images/about/anke.png",
        "jobTitle": "Event specialist",
        "timeLine": "March.2023 ~ October.2024",
        "jobIntro": "- **Planned and executed** 10 large-scale forums on long-term care, consistently attracting an average of 200+ attendees per forum through targeted advertising strategies and socail media marketing.\n\n - Drafted and submitted detailed plans to government bodies and client companies, ensuring compliance and alignment with objectives.\n\n - Managed and updated trade show **website content**, optimizing user engagement and **information accessibility**.\n\n - Cultivated and maintained strong relationships with keynote speakers, ensuring high-quality presentations and **ongoing partnerships**."
      },
      {
        "companyName": "Impact Hub Taipei",
        "industry": "Social Enterprise",
        "companyLogo": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbTm9dpemZhDUhoiUGIxxYTLnefm-G3lpW-9ryMo748Q&s",
        "jobTitle": "Corporate Innovation Team Intern",
        "timeLine": "Jan.2022 ~ June.2022",
        "jobIntro": "- **Authored 3 insightful columns** and edited 10 opening videos using **Adobe Premiere** for the 2nd Bailan MayB Lab Project, contributing to the project's final proposal and showcasing my ability to communicate complex ideas effectively.\n\n - Led the creation of over 40 **social media posts** for Facebook and Instagram as part of the Vision Future Project, utilizing **Adobe Illustrator** to design visually appealing and brand-aligned content.\n\n - Played a key role in organizing and conducting 5+ **live events**, including sessions for a Startup Accelerator and Incubator, enhancing participant engagement and facilitating successful knowledge exchange and networking opportunities."
      },
      {
        "companyName": "BenQ HeadQuarter",
        "industry": "Tech",
        "companyLogo": "https://www.benq.com/etc/designs/g6/clientlib-site/img/header-icon/nav-icon-benq-logo.png",
        "jobTitle": "US/UK Digital Marketing Intern",
        "timeLine": "July.2021 ~ Jan.2022",
        "jobIntro": " - Spearheaded the establishment of robust **partnerships** with over 10 key opinion leaders (KOLs) across the UK and US, focusing on influential YouTubers and TikTokers, to enhance **brand visibility and engagement**.\n\n - Led the influencer marketing projects by coordinating product reviews, meticulously analyzing video performance metrics to gauge **audience engagement and campaign effectiveness**.\n\n - Enhanced promotional content by editing 5+ **advertising videos** showing on YouTube and Amazon, utilizing **Adobe Premiere** to ensure top-quality visual presentation."
      }
    ]
  },
  "BLOGS_ALL": [
    {
      "blogId": 1,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Programming Languages",
      "blogTitle": "TypeScript",
      "thumbnail": "https://picsum.photos/id/1/200/300",
      "heartNum": 2,
      "blogIntro": "- **定義資料型態**\n\n  - 需要先 定義資料型\n    \n    `let 變數:資料型態 ;`\n    \n    - 可選擇多種資料型態→使用`union |`\n    \n    ```tsx\n    let name : string;\n    name = 5 --> 出現error\n    name = \\\"Tim\\\" --> okay\n    \n    ------\n    let age: number | string; // age can be number or string\n    let hobbies : string[];\n    let isStudent : boolean;\n    let role : [number, string];\n    let happy: any //也可以定義成任何型態都行（不建議）應該用unkown\n    let happy: unkown;\n    \n    ```\n    \n    - 定義物件\n    \n    ```tsx\n    //先定義物件型態\n    type 物件名稱（首字要大寫）Person = {\n    \tname : string;\n    \tage?: number; //加問號-> 該屬性為optional\n    }\n    \n    //再宣告變數\n    let person: Person;\n    \n    //宣告an array of Person object\n    let lotsOfPeople : Person[];\n    \n    ```\n    \n    - 定義函式\n    \n    ```tsx\n    let 函式名稱: (所帶入的變數型態) => return值的型態\n    \n    let printName : (name: string) => void //return undefined\n    let printName : (name: string) => never // 完全不return\n    ```\n    \n- **Aliases (type and interface)**\n    \n    ```tsx\n    type X = {\n    \ta: string;\n    \tb: number;\n    }\n    \n    type Y = {\n    \tc: string;\n    \td: number;\n    }\n    //想要在Y 裡面有用到X 裡的值 加上 X &，之後在y 就必須有abcd值\n    let y: Y = X & {\n    \tc: \\\"mewo\\\"\n    \td: 3 // 少了ab 會出現error\n    }\n    ```\n    \n    ```tsx\n    interface Person {\n    \tname : string;\n    \tage?: number;\n    }\n    \n    interface Guy extends Person { //想要沿用Person 就加上 extends\n    \tprofession: string;\n    }\n    ```\n    \n    - string vs. String 大小寫不一樣！\n        \n        In JavaScript and TypeScript, `string` and `String` are different, but related.\n        \n        `string` (lowercase 's') is a primitive data type in JavaScript and TypeScript, while `String` (uppercase 'S') is a global object that can be used to manipulate strings.\n        \n        Here's a brief comparison:\n        \n        - `string` (primitive): This is a basic data type. When you create a string using string literals (e.g., `let str = 'hello'`), you're creating a string primitive.\n        - `String` (object): This is a wrapper object that JavaScript automatically wraps around the string primitive when you use properties or methods on a string (e.g., `let str = new String('hello')`). It's generally recommended to use string primitives (`string`) instead of string objects (`String`) in JavaScript for performance reasons.\n        \n        In TypeScript, when you're defining types, you should use `string` (lowercase 's').\n        \n    - react types\n        - contextProvider {**`children`**}\n            \n            we often type it as `ReactNode`, which is a type provided by the React TypeScript definitions. This type is used to represent any thing that can be rendered in React. This includes numbers, strings, JSX elements or arrays of these things.\n            \n            ```tsx\n            interface DrawerProviderProps {\n              children: ReactNode\n            }\n            ```\n            \n            ```tsx\n            //完整 useContext / createContext code\n            import React from 'react'\n            import { createContext, useState, useContext, ReactNode } from 'react'\n            \n            type DrawerContextType = {\n              openDrawer: boolean\n              setOpenDrawer: React.Dispatch<React.SetStateAction<boolean>>\n            }\n            const DrawerContext = createContext<DrawerContextType | undefined>(undefined)\n            \n            interface DrawerProviderProps {\n              children: ReactNode\n            }\n            \n            export const DrawerProvider: React.FC<DrawerProviderProps> = ({ children }) => {\n              const [openDrawer, setOpenDrawer] = useState<boolean>(false)\n              return (\n                <DrawerContext.Provider value={{ openDrawer, setOpenDrawer }}>\n                  {children}\n                </DrawerContext.Provider>\n              )\n            }\n            \n            export const useGroups = () => useContext(DrawerContext)\n            \n            ```\n            \n        - pass prop in compent can be NULL!\n            \n            ```tsx\n            //makes it an optional prop, and | null allows it to be null\n            interface Props {\n              sections?: Array<Sections> | null;\n            }\n            //但同時會需要因為有可能是null而特別在元件內處理意外狀況\n            function SideDrawer({ sections }: Props) {\n              return (\n                <div>\n                  {sections && sections.map((section) => (\n                    // Render section...\n                  ))}\n                </div>\n              );\n            }\n            ```\n            \n    - TS + API\n        - 不能直接讓data = [response.data](http://response.data)\n            - The function `getUserInfo` is asynchronous, which means it returns a Promise. In your code, you're trying to assign the result of `getUserInfo()` to `DUMMY_USER_INFO` immediately, but the data won't be available until the Promise resolves.\n            \n            ```jsx\n            const getUserInfo = async () => {\n              const response = await getUserInfoAPI()\n              return response.data\n            }\n            \n            //不能直接：\n             const DUMMY_USER_INFO = getUserInfo()\n            ```\n            \n        - 解決方案：use the `useState` and `useEffect` hooks from React to fetch the data when the component mounts and store it in the component's state.\n            \n            we define a state variable `userInfo` and a function `setUserInfo` to update it. We define a function `fetchUserInfo` inside the `useEffect` hook that fetches the user info and updates the state with it. The `useEffect` hook runs when the component mounts because its dependency array is empty (`[]`).",

      "comment": [
        {
          "commentId": 1,
          "createdDate": "2023.Dec.23",
          "commentContent": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi optio impedit incidunt tempora assumenda ipsa aut hic similique nulla necessitatibus"
        }
      ]
    },
    {
      "blogId": 2,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Programming Languages",
      "blogTitle": "JS Basics - data types",
      "thumbnail": "https://picsum.photos/id/2/200/300",
      "heartNum": 2,
      "blogIntro": "- **有哪些資料型態 (data types)? 該怎麼辨別一個變數的資料型態?**\n    - JavaScript 的資料型態中，有七個原生值，這七個原生值以外的，全都是屬於物件。\n    - 原生值\n        - 原生值是不可變的 (immutable) ＝不能改變那個值本身\n        \n        ```jsx\n        let greeting = \\\"Hi\\\";\n        greeting = \\\"Hello\\\"; // 賦予另一個值，但上面的 'Hi' 本身沒變動\n        ```\n        \n        1. String\n        2. Boolean\n        3. Number\n            1. JS 沒有分整數與浮點數，皆為number →雙精度浮點數，精度介於 **`-(2^53 − 1)`** 與 **`2^53 − 1`**\n            2. **`+Infinity`**, **`-Infinity`**, 與  **[NaN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)** 都是 **`number`** 這個型別，\n            3.  JavaScript 是採用 IEEE 754 六十四位元雙精度浮點 → 0.1+ 0.2 = 0.3000…4\n                1. 因為二進位會導致只有1/2、1/4、1/8 等可以被清楚表達，其他都會因為電腦記憶體有限，所以為了要精準表達，會出現奇怪數字\n                2. 解決辦法： `.toFixed` & `.toPrecision`  或使用套件：mathjs / decimal.js. / bignumber.js\n                `console.log((0.1 + 0.2).toFixed(1));\n                 console.log((0.1 + 0.2).toPrecision(1));`\n                \n        4. **BigInt** 一串數字後面有n\n            1. 可任意選擇其精準度\n            2. 不可以拿 **`BigInt`** 跟 **`number`** 型別的值交互使用，這會出現 **`TypeError`**\n            3. create 方法\n                \n                ```jsx\n                // Using the BigInt function\n                const bigInt1 = BigInt(123456789012345678901234567890);\n                console.log(bigInt1); // Output: 123456789012345678901234567890n\n                \n                // Using the n suffix\n                const bigInt2 = 123456789012345678901234567890n;\n                console.log(bigInt2); // Output: 123456789012345678901234567890n\n                ```\n                \n        5. **Undefined**\n            1. 是一個型別，它本身也是一個值。\n            2. 沒有宣告的變數 or 宣告了但還沒賦值\n        6. **Null**\n            1. 賦予某個變數`null` 值\n        7. **Symbol**\n            1. 一個獨特 (unique) 值，多半會搭配物件一起使用，作為物件的鍵 (key)\n            2. create\n                \n                ```jsx\n                let id = Symbol('id');\n                let user = {\n                  name: 'John Doe',\n                  [id]: 123 // Symbol as a property key\n                };\n                ```\n                \n    - 判別資料型態（注意例外）\n        - 一般來說： **`typeof`**\n        - 例外\n            - typeof `null`→ object ( JS的bug）\n            - type of `array` → object\n            - type of `function` → function\n        - 我們該如何辨別某個變數是物件，還是陣列呢?\n            - 確認陣列 true / false：**`Array.isArray()`**\n            - 辨別陣列、函式與一般物件 ： **`Object.prototype.toString()`**\n                \n                ```jsx\n                const arr = [1, 2, 3];\n                const fn = () => {\n                  return 123;\n                };\n                const obj = { foo: 123 };\n                \n                console.log(Object.prototype.toString.call(arr)); // [object Array]\n                console.log(Object.prototype.toString.call(fn)); // [object Function]\n                console.log(Object.prototype.toString.call(obj)); // [object Object]\n                ```\n                \n            \n\n- **Map 與 object 的差別？為什麼有 object 還需要 Map？**\n    - what is map 一種構造函式 : `new Map([iterable])`\n        - 用鍵與值 (key-value pair) 的形式儲存資料格式\n        - https://www.zhenghao.io/posts/object-vs-map\n        \n        |  | object | map |\n        | --- | --- | --- |\n        |  | 都是key - value pair 的型態 | ← |\n        | key types | string / symbol （都會被強行轉為字串） | 任何 |\n        | 如何取得number of items | https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys+.length | size |\n        | 可一次刪除 | 一一刪除 | clear |\n        | iterable? | 不能直接迭代，要搭配 Object.keys or Object.entries  | 可直接迭代＝可直接使用 for...of 、forEach |\n        | 適合頻繁更改key-value? | x | v  |\n        | serialzation?\n        & parsing (to JSON) | 可直接用 \n        JSON.stringify() \n        JSON.parse() → JSON to object | 不能直接用 |\n        | default keys? \n        (accidental keys) | object 有 prototype, 所以有可能存在default key | 無，放啥就是啥 |\n        | 安全性 for user-provided key-value pairts | 較容易被駭，因可override the object's prototype | safer |\n        |  |  | less memory |\n    - Map 常見操作方法\n        - **`new Map()`** ：生成新Map\n        - **`set(key, value)`**：新增元素至 Map 中\n        - **`get(key)`**：通過鍵 (Key) 查詢特定元素並返回\n        - **`has(key)`**：檢查 Map 中是否存在特定鍵 (Key)\n        - **`delete(key)`**：透從 Map 中刪除特定元素\n        - **`size`**：獲取 Map 中元素的數量\n- **Set、WeakSet 和 WeakMap 的區別？**\n    - Set\n        - 呈現的樣子： `Set(長度）{ 裡面的值 }`\n            - 如： `Set(0) {}`、`Set(4) {1, 5, 'text', { a: 1, b: 2 }}`\n        - 一種「構造函式」 結構類似 陣 列 ，但裡面的值都是唯一（無重複），但可接受各種資料類型\n        - Set 中沒有鍵值(Key) → 使用 entries() 遍"
    },
    {
      "blogId": 3,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Programming Languages",
      "blogTitle": "JS Basics - Promise",
      "thumbnail": "https://picsum.photos/id/3/200/300",
      "heartNum": 3,
      "blogIntro": "- 這個約定請求會在未來每個時刻返回數據給調用者。在 MDN 文件中， Promise 是用來表示**一個非同步步操作的最终完成（或失敗）及其結果值**。\n- Promise 是一個**構造函式，**為解決callback hell\n    - 透過 new 關鍵字建立一個 Promise\n    - 參數：executor Funciton `(resolve, reject)`, 回會立即執行\n        - resolve 實現函式：如下方程式碼，請求成功的例子，正確的時候會調用 resolve 函式，並回傳結果。\n        - reject 拒絕函式：如下方程式碼，請求失敗的例子，失敗的時候會調用 reject 函式，並回傳結果。\n        \n        ```tsx\n        new Promise((resolve, reject) => {\n          console.log(\\\"executor 立即執行\\\"); // executor 立即執行\n        });\n        ```\n    \n    - **`.then`  多次調用：**串起非同步操作，避免callback hell\n        \n        ```tsx\n        function someFunc(url){\n        \treturn new Promise ((resolve, reject) => {\n        \t\tresolve()//dosomthing\n        \t\treject()//dosomthing\n        \t}\n        }\n        \n        someFunc(\\\"mewomewo\\\")\n          .then((res) => {\n            console.log(res); \n            return 1;\n          })\n          .then((res) => {\n            console.log(res); // 1\n            return 2; \n          })\n          .then((res) => {\n            console.log(res); // 2\n          });\n        ```\n    \n    - **`.catch`**  錯誤處理\n    - **`.finally`**  不論成功與否，都要執行\n    \n    ```tsx\n    fetch(\\\"https://explainthis.com/data\\\")\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n      })\n      .catch((error) => {\n        console.error(\\\"oops!\\\", error);\n      })\n      .finally(() => {\n        console.log(\\\"close loader\\\");\n      });\n    ```\n- **`Promise.all()`** 同步處理多的promises\n    - execute multiple promises in parallel and wait for all of them to complete.\n    - 接收一個內有多個 promises 的 **`Iterable`** ，例如 Array、Map、Set。\n    - 回傳值：single Promise (array)\n        - 如果 **`Iterable`** 是空的，例如空 Array，則 fulfilled 值會是空的 Array。\n        - 如果 **`Iterable`** 不是空的，則如果所有的 promises 都 fulfilled，則依序回傳 fulfilled 的值；如果其中有一個 promise 被 rejected，則會馬上 reject，並提供該promise被拒絕的原因。\n    - 情境\n        - fetch data from multiple API endpoints and only proceed once all the data is available.所以可以一次觸發所有的fetch，但值到所有promise都滿足才去渲染\n        \n        ```tsx\n        function getUserData(userId) {\n            const userPromise = fetch(`https://api.example.com/users/${userId}`).then(response => response.json());\n            const postsPromise = fetch(`https://api.example.com/users/${userId}/posts`).then(response => response.json());\n            const commentsPromise = fetch(`https://api.example.com/users/${userId}/comments`).then(response => response.json());\n        \n            return Promise.all([userPromise, postsPromise, commentsPromise])\n                .then(results => {\n                    const [user, posts, comments] = results;\n                    return {\n                        user: user,\n                        posts: posts,\n                        comments: comments\n                    };\n                });\n        }\n        \n        getUserData(1)\n            .then(data => console.log(data))\n            .catch(error => console.error(\\\"Error fetching data:\\\", error));\n        \n        ```\n    \n    - **`async`**/**`await`** with **`Promise.all()`**\n        \n        ```tsx\n        async function fetchData() {\n            try {\n                // Create an array of promises\n                const userPromise = fetch('/api/users').then(res => res.json());\n                const postsPromise = fetch('/api/posts').then(res => res.json());\n        \n                // Await all promises to resolve\n                const [users, posts] = await Promise.all([userPromise, postsPromise]);\n        \n                console.log('Users:', users);\n                console.log('Posts:', posts);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        }\n        \n        fetchData();\n        \n        ```\n    \n    - **`Array.prototype.map()` with `Promise.all()`**\n        \n        ```tsx\n        function fetchUserData(userId) {\n            return fetch(`https://api.example.com/users/${userId}`)\n                .then(response => response.json())\n                .catch(error => console.error(`Error fetching user ${userId}:`, error));\n        }\n        \n        async function fetchAllUsers(userIds) {\n            try {\n                // Map each userId to a promise returned by fetchUserData\n                const promises = userIds.map(fetchUserData);\n        \n                // Use Promise.all to wait for all promises to resolve\n                const users = await Promise.all(promises);\n        \n                console.log('All user data:', users);\n                return users;\n            } catch (error) {\n                console.error('Error fetching all users:', error);\n            }\n        }\n        \n        // Example usage\n        fetchAllUsers([1, 2, 3, 4]);\n        \n        ```\n        \n    \n---\n\n**`async/await`  語法糖**\n\n- async: 使用 **`async`** 關鍵字聲明的函式為異步函式，異步函式會返回一個 Promise 物件，而非直接返回函式執行的結果。\n\n```tsx\n// 異步函式\nfunction f3() {\n  return Promise.resolve(\\\"Hello! ExplainThis!\\\");\n}\n\nf3(); // 輸出: Promise {<fulfilled>: 'Hello! ExplainThis!'}\n\n---\nasync function f2() {\n  return \\\"Hello! ExplainThis!\\\";\n}\n\nf2().then((result) => {\n  console.log(result); // \\\"Hello! ExplainThis!\\\";\n});\n```\n\n- **`await`** 是一個運算子，用於等待一個 Promise 完成或拒絕。\n    - 當使用 **`await`** 時，程式會暫停執行該 **`async`** 函式，直到 **`await`** 等待的 Promise 完成並回傳結果後，才會繼續往下執行。\n    - 可以在最頂層寫，不一定要要在async\n\n1. 使用 **`async`** 關鍵字定義一個異步函式，該函式會返回一個 Promise 對象。\n2. 在異步函式中，使用 **`await`** 等待 Promise 的完成，並直接返回結果。\n3. 使用 **`try...catch`** 捕獲錯誤，使得錯誤處理更加方便和直觀。",

      "comment": [
        {
          "commentId": 2,
          "createdDate": "2024.Feb.3",
          "commentContent": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi optio impedit incidunt tempora assumenda ipsa aut hic similique nulla necessitatibus"
        },
        {
          "commentId": 3,
          "createdDate": "2024.Feb.13",
          "commentContent": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi optio impedit incidunt tempora assumenda ipsa aut hic similique nulla necessitatibus"
        }
      ]
    },
    {
      "blogId": 4,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Web Development",
      "blogTitle": "JWT",
      "thumbnail": "https://picsum.photos/id/4/200/300",
      "heartNum": 0,
      "blogIntro": "- **簡介**\n    - JSON Web Token = 使用 JSON 格式來製作 token\n    - securely transmitting information between parties as a JSON object.\n    - 比起XML-based standards such as SAML 更 compact\n- **組成 `xxxxx.yyyyy.zzzzz`**\n    - three Base64-URL strings separated by dots  `.`  that can be easily passed in HTML and HTTP environments\n    - **Header：**\n        1.  token種類 = （JWT）\n        2. 使用的加密演算法（如： HMAC、 SHA256 、 RSA）\n    - **Payload，放claims （使用者的相關資訊）→ **Base64Url** encoded**\n        1. Registered Claims 標準公認訊息 （如： **iss** (issuer), **exp** (expiration time), **sub** (subject), **aud** (audience)）\n        2. Public Claims 向官方申請公開聲明be defined at will by those using JWTs\n        3. Private Claims 客製化的claims, 可放自定義且非機密的資訊\n    - **Signature用來驗證 JWT 是否經過篡改**\n        1. 拿上面 encoded 的header & payload + secret\n        2. 密鑰 secret : \n        \n        ```tsx\n        HMACSHA256(base64UrlEncode(header) + \\\".\\\" + base64UrlEncode(payload), 256 - bit - secret)\n        ```\n        \n- **優缺點**\n    - **優點（compared to **Simple Web Tokens (SWT)** and **Security Assertion Markup Language Tokens (SAML)**）**\n        - 不冗長，compact →when it is encoded its size is also smaller,lightweight and URL-safe,→ideal for passing in URLs,HTTP headers, or in a POST parameter.\n        - 安全性：JWT組成包含signing→can use a public/private key pair in the form of a X.509 certificate for signing.\n            - （SWT can only be symmetrically signed by a shared secret using the HMAC algorithm）\n        - 使用JSON，考直接map to 物件（XML doesn't have a natural document-to-object mapping）\n        - Internet scale：client-side processing of the JSON Web token on multiple platforms, especially mobile\n    - **缺點**\n        - Cross-site 攻擊: 因為通常存在local storage / session storage → 如果成功駭進script並取得JWT, 就會導致unauthorized access to the user’s session and sensitive data.\n        - Local Storage 不安全因為沒有**HttpOnly**\n        - Inability to Revoke Individually無法被單獨銷毀：ＪＷＴ是基於their content and the signature, 不需向後端貨server驗證（no server-side record to adjust or revoke if the token is still valid.）會導致→This can be problematic in scenarios where you need to change permissions or end user sessions immediately (e.g., user logout, changing permissions)\n    - **以前端的角度，可以先初步擋掉不合法JWT**\n        1. **Decode the JWT**: Extract the payload from the JWT and decode it from base64 to a string.\n        2. **Parse the Payload**: Convert the JSON string into an object.\n        3. **Check the Expiration**: Compare the expiration time from the payload to the current time.\n        \n        ```tsx\n        //檢查過期了沒\n        \n        function isJwtExpired(token) {\n            try {\n                // Split the JWT into its parts\n                const payload = token.split('.')[1];\n        \n                // Base64 decode the payload\n                const decodedPayload = atob(payload);\n        \n                // Parse the JSON string into an object\n                const jwtPayload = JSON.parse(decodedPayload);\n        \n                // Get the current time and convert it to seconds (JWT exp is in seconds)\n                const currentTime = Math.floor(Date.now() / 1000);\n        \n                // Check if the token is expired\n                return jwtPayload.exp < currentTime;\n            } catch (error) {\n                console.error(\\\"Failed to decode JWT:\\\", error);\n                return true; // Assume expired on failure to decode\n            }\n        }\n        \n        // Example usage:\n        const token = 'your.jwt.token.here';\n        console.log(isJwtExpired(token)); // Outputs: true if expired, false if not\n        \n        ```\n        \n---\n\nreference\n\n- https://jwt.io/introduction\n- Explain this",

      "comment": [
        {
          "commentId": 4,
          "createdDate": "2023.March.23",
          "commentContent": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi optio impedit incidunt tempora assumenda ipsa aut hic similique nulla necessitatibus"
        }
      ]
    },
    {
      "blogId": 5,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Web Development",
      "blogTitle": "OAuth",
      "thumbnail": "https://picsum.photos/id/5/200/300",
      "heartNum": 2,
      "blogIntro": "- **Open Authorization**\n\n- **基本 Oauth 流程：**\n    1. 點擊登入鈕，導到第三方的授權頁面\n    2. 使用者同意後，導回專案頁（或指定的路徑）\n    3. 導回的同時會取得google（第三方）給的 token\n    4. 前端用POST api 傳 google token 給後端\n    5. 後端拿到後進行驗證跟換token，用response 回傳給前端 server同意的token\n    6. 前端將token存在某地方，結束驗證\n\n- **chrome-extension google oauth 流程 → PKCE**\n    - **Proof Key for Code Exchange**\n    - 到Google Developer Console 開新專案（可將專案設定為web, extension…會有相對應的方法）取得 clientId and clientSecret\n    - Redirect URLS 會由google 自動取得 `const redirectUri = chrome.identity.getRedirectURL();` 會長：https :// chrome-extension-id.chromiumapp.org/\n    - 要在 Manisfest 加上permission\n    \n    ```tsx\n    \"permissions\": [\n        \"identity\"\n      ],\n      \"oauth2\": {\n        \"client_id\": \"YOUR_CLIENT_ID.apps.googleusercontent.com\",\n        \"scopes\": [\n          \"https://www.googleapis.com/auth/userinfo.email\",\n          \"https://www.googleapis.com/auth/userinfo.profile\"\n        ]\n      }\n    ```\n    \n    - 前端從google取得的是 authorization code → 給後端進行交換取得access token (and possibly a refresh token)→ 再核發自己的JWT給前端存起來\n    - authUrl → for initiating OAuth authentication with Google\n        - **`client_id`**: The client ID of your registered application.\n        - **`response_type`**: Set to \"code\" to indicate that you are initiating the standard OAuth 2.0 authorization code flow.\n        - **`redirect_uri`**: Encoded redirect URI obtained earlier.\n        - **`scope`**: Specifies the permissions your application is requesting (in this case, access to the user's profile and email).\n    - launchWebAuthFlow\n        - This method is used to launch the web authentication flow. It opens a new window where the user can sign in and consent to the requested permissions.\n        - The **`interactive`** parameter set to **`true`** means that the window will be displayed if it needs user interaction.\n\n//background.js\n\n```tsx\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === \\\"authenticate\\\") {\n    const redirectUri = chrome.identity.getRedirectURL();\n    const authUrl = `https://accounts.google.com/o/oauth2/auth?client_id=560502229224-mi0fugbocfd28g611gsrhsmrai6l5ird.apps.googleusercontent.com&response_type=code&redirect_uri=${encodeURIComponent(\n      redirectUri\n    )}&scope=profile%20email`;\n    \n    chrome.identity.launchWebAuthFlow(\n      { url: authUrl, interactive: true },\n      (responseUrl) => {\n        const url = new URL(responseUrl);\n        const code = url.searchParams.get(\\\"code\\\");\n        sendResponse({ code: code });\n      }\n    );\n    return true; // This tells the Chrome message passing system to expect an asynchronous response.\n  }\n});\n\n```\n\n// component \n\n```tsx\n  const handleGoogleSubmit = () => {\n    chrome.runtime.sendMessage({ action: \\\"authenticate\\\" }, async (response) => {\n      if (response && response.code) {\n        const redirectUri = chrome.identity.getRedirectURL();\n        const token = {\n          authorization_code: response.code,\n          redirect_url: redirectUri,\n        };\n        try {\n          const response = await googleOauthAPI(token);\n          localStorage.setItem(\\\"authToken\\\", response.data.token",
      "comment": [
        {
          "commentId": 4,
          "createdDate": "2023.March.23",
          "commentContent": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi optio impedit incidunt tempora assumenda ipsa aut hic similique nulla necessitatibus"
        }
      ]
    },
    {
      "blogId": 6,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "Development Tools",
      "blogTitle": "Vite",
      "thumbnail": "https://picsum.photos/id/6/200/300",
      "heartNum": 2,
      "blogIntro": "- **建構工具 (build tool)**\n- leverages native ES Modules\n- **核心功能**\n    - **作為開發伺服器 (dev server)**\n        - 讓開發者可以在本地 (localhost) 進行開發。\n        - 熱模組更新 (hot module replacement, HMR) 提供開發者非常好的開發體驗。( ex: React → 改動後，Vite 的熱模塊更新會以非常快的速度重新渲染本地的頁面，同時會保留當下的任何狀態 (state)。）\n    - **協助進行生產環境的打包**\n        - 透過 Rollup 進行打包，高度優化部署到生產環境 (production) 的打包結果。\n            - 在打包的過程中，透過 tree-shaking、lazy-loading、common chunk splitting 等方式，可以讓打包出的結果能夠獲得優化。\n        - 番外篇：Rollup\n            - module bundler for JS → 主要工作：take JavaScript and TypeScript files, along with any other assets, and compile them into a single file for use in a browser.\n            - focuses on producing a smaller output by generating more efficient bundles\n        - 為什麼我們要為生產環境打包程式碼?\n            - 畢竟現在原生的 ESM 已經得到廣泛支持。原因是在生產環境中直接使用未打包的 ESM 仍然不是太有效率，這是因為由於嵌套引入 (nested import) 會需要額外的網路傳輸往返，即使開啟 HTTP/2 也是，而額外的網路傳輸就需要額外的時間。為了在生產環境中，能有最佳的加載性能，透過 tree-shaking、懶加載（lazy-loading）和常見塊分割（common chunk splitting）來打包程式碼，可以更好地緩存，也能提升效率。\n\n- **解決問題：**\n    - **Vite 不管在本地專案的冷啟動，或是專案改動時的熱模組更新，速度都非常的快**。（加速回饋循環）\n    當專案越大時，不僅專案本身的程式碼越多，依賴的套件也會變多，導致整個專案的程式碼程式碼量大幅度上升，而過去的工具並沒辦法很有效的處理這麼多程式碼，才會導致，改一個東西，要等很久才會在畫面上看到改變\n    - 番外篇：冷啟動\n        - 系統在完全沒有預先運行的狀態下啟動、或首次啟動構建工具所經歷的階段\n        - 系統需要從頭開始初始化，通常都會需要比較長時間。\n\n- **如何解決伺服器過慢的問題?**\n    - **「啟動過慢」**\n        - 把應用程式中的模組分為兩類來加快開發服務器的啟動時間，一個是依賴 (dependencies)，另一個是源碼 (source code)。\n        - Dependencies:\n            - Vite 使用 esbuild 預先打包這些依賴（esbuild 是用 Go 語言寫的，比基於 JavaScript 的打包工具快 10 到 100 倍）\n            - 大多是普通的 JavaScript，開發過程中不會經常改變\n        - Source Code\n            - 需要轉換 JSX、CSS 或 Vue/Svelte 組件等非純 JavaScript 的東西，並且會經常被更動。\n            - 丟包給瀏覽器：並不是所有的源碼都需要同時加載（例如，基於路由的分割的代碼，只有在到某個路由時才需要加載）。→ Vite 通過原生 ESM 來提供源碼。實際上這是讓瀏覽器接管了打包工具的部分工作，Vite 只需要根據瀏覽器的請求，按需轉換和提供源碼。it performs transformations on the fly when files are requested by the browser.\n            - →當前某個元件被實際使用時，才會動態載入背後的程式碼，這也樣讓最開始要啟動伺服器的程式碼減少，自然讓啟動變快。\n            - leverage HTTP caching and only re-compile changed modules,\n    - **「更新過慢」**\n        - 原本：越大包，打包起來越慢)。\n        - 支持熱模組替換（HMR）：允許模組在不影響頁面其餘部分的情況下「熱替換」自己。\n        - 在 Vite 中，HMR 是通過原生 ESM 進行的。當一段程式碼被更新時，Vite 只需要準確地使更新的模組與其最近的 HMR 邊界之間的鏈路失效 (大多數時候只是模組本身)，這使得 HMR 更新不管應用程式的大小如何都能維持高速。\n            - 番外篇：**HMR (Hot Module Replacement)**\n                - allows a development server to inject updated modules into the running application without requiring a full reload. 幾乎可以馬上就看到改變的結果\n        - Vite 還利用 HTTP 標頭來加速整頁重載 (這也是利用瀏覽器來幫忙)：原碼的模組請求是通過 **`304 Not Modified`** 請求，而依賴模組則通過 **`Cache-Control: max-age=31536000,immutable`** 來快取，這樣快取確保這些依賴不會再次觸及開發伺服器，更新時速度也就大幅提升。\n        \n        ```tsx\n        // vite.config.js\n        \n        import { defineConfig } from 'vite';\n        import react from '@vitejs/plugin-react';\n        import path from 'path';\n        \n        // https://vitejs.dev/config/\n        export default defineConfig({\n          plugins: [react()],\n          base:\"\" , //sets the base path for the project. An empty string implies that the assets are served from the root. This is important for resolving assets in production, especially if you're deploying to a subdirectory.\n ",

      "comment": [
        {
          "commentId": 4,
          "createdDate": "2023.March.23",
          "commentContent": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi optio impedit incidunt tempora assumenda ipsa aut hic similique nulla necessitatibus"
        }
      ]
    },
    {
      "blogId": 7,
      "publishedDate": "2024.Feb.05",
      "blogTopic": "React",
      "blogTitle": "React Hooks",
      "thumbnail": "https://picsum.photos/id/7/200/300",
      "heartNum": 2,
      "blogIntro": "- **Hook**\n\n- 以前沒有 Hooks 是用 class component ，無法重複使用邏輯且造成 wrapper Hell\n- start with `use`\n- 提供可重複使用的狀態邏輯\n- 只能在 react 函式最頂層使用（不要在迴圈、條件式或是巢狀的 function 內呼叫 Hook）因為：要讓每一次 Hook 的調用順序是穩定的，react才能知道哪個 **`state`** 對應到哪個 **`useState`**\n每一個 Hook 在每一次元件渲染時的調用順序都一樣，只要 Hook 的調用順序在每次渲染時保持一致，React 就能正確地將內部 state 和對應的 Hook 進行關聯。\n\n- **常見Hooks**\n\n- **useState**  紀錄並更新state\n    - `[state, setterFunction] = useState(初始值)`\n     藉由setterFunctoin 更新state 值，同時觸發re-render.\n    - 初始值 (裡面什麼都可以放) number, string, array, object, null, undefined, function\n    \n    ```\n      const [title, setTitle] = useState({\n        current: group.group_title,\n        old: group.group_title,\n      });\n    ```\n    \n- **useReducer**  用來管理比較複雜的state\n    \n    [reference](https://medium.com/hannah-lin/react-hook-%E7%AD%86%E8%A8%98-usereducer-%E7%9C%9F%E7%9A%84%E8%83%BD%E5%AE%8C%E5%85%A8%E5%8F%96%E4%BB%A3-redux-%E5%97%8E-fabcc1e9b400)\n    \n- **useContext** : 避免用nest結構層層傳prop\n    - context : `const 某Context = createContext({初始值})`\n    - Provider ：在專案最外層包起來\n        \n        ```tsx\n        const 某Provider = ({children}) => {\n        \t...\n        \treturn (\n        \t\t<某Context.Provider value={值}>\n        \t\t\t{children}\n        \t\t</某Context.Provider>\n        \t)\n        }\n        ```\n        \n    - Consumer 接受者→  在元件內使用： `const 某 = useContext(某Context)`\n\n- **useEffect** 要執行sideEffect\n    - `useEffect(setupFunction()⇒ {}, [dependencies])`\n        1. setup function : 如何連結外部系統的程式碼，如果需要清除邏輯，可以在 setup function 中回傳一個清除 function。\n        2. dependencies : (optional, 陣列) 放會影響setupFunction的變數，可以放props, state, or any 元件。（如果不指定， effect 會是在每次重新渲染元件後重新執行）\n            \n            React 會使用 **`Object.is`** 算法來進行比較， 如果 dependencies 中任意一個值與前一次不同，則此 **`useEffect`** 會重新執行。\n        \n        - Cleanup Function\n            - perform any necessary cleanup actions before the component unmounts or before the **`useEffect`** hook runs again after its dependencies change.\n            - 使用時機\n                - Adding event listeners to DOM elements or window/document.\n                - Subscribing to some external data sources, like a WebSocket or a store in flux architectures.\n                - Setting up timers or intervals\n                - Using resources that need to be manually released, like web sockets or file handles in Node.js environments (if you use server-side rendering).\n    - 使用時機：fetch api、紀錄追蹤、**[setInterval()](https://developer.mozilla.org/en-US/docs/Web/API/setInterval)**\n    \n    runs after the paint, **`useEffect`** won’t cause a visible delay in rendering UI updates, making it better for performance in most cases.\n    \n    1. 元件第一次被加入(mount）時\n    2. 重新渲染時，如果dependencies有發生改變：先執行cleanUp function, 再帶著新的值進行setupFunction\n    3. cleanup function 的程式碼，會在元件生命週期結束 (unmount) 時，執行最後一次。\n    - vs. useLayoutEffect：\n    \n    |  | useEffect | useLayoutEffect |\n    | --- | --- | --- |\n    | 執行時機 | render 渲染結束後執行，使用者看到變化之後被呼叫 |  DOM 更新之後執行，使用者看到變化之前就被呼叫（不會等渲然結束） |\n    | 影響當前UI | 不會造成可看見的delay | 再下一次渲染之前就可以更新狀態 |\n    |  | After DOM mutations, after visual changes, and after the browser has painted. 使用者不用等 | After DOM mutations, but before visual changes and before browser painting. 使用者要等 |\n    |  | 不需立即呈現變化在螢幕上 |  |\n    \n    *** 瀏覽器處理 DP更新順序：\n    \n    1. DOM mutations: 元件加減，但不會馬上看得見得見： These mutations adjust the underlying data structure of the page,\n    2. Render Tree Construction and Layout Calculatoin : 更新 render tree, 包含計算個元件的styles (css)  & position \n    \n    `useLayoutEffect`\n    \n    1. Painting ：瀏覽器把每個元件用pixel塞成一層層 。\n    2. Compositing : 組合比較複雜的元件（例如使用 特殊Image, 動畫, transitions…)\n    3. Final Display 真正的渲染 Browser Painting: 將已經composited 的 layers 展現在畫面上，這時使用者才看得到畫面 \n    \n    `useEffect`\n    \n    ```tsx\n    useEffect(() => {\n    \tconsole.log(\\\"log 1\\\")\n    }, [])\n    \n    useLayoutEffect(() => {\n    \tconsole.log(\\\"log 2\\\")\n    }, [])\n    \n    //\n    log 2\n    log 1\n    ```\n    \n- **useRef** 紀錄一個「不會被渲染」的值，隔絕於component life cycle\n    \n    `const 某Ref = useRef(initialValue);`\n    \n    - 不會觸發 re-render，因此可以拿來存放一些不會變動的值\n        - 可以用來計算render了幾次（因為更新ref值不會自己重新渲染導致無限迴圈）\n    - 以物件回傳： `{current: 值}`\n    - 使用時機：\n        - 想要取得最新 or 前一個 的值\n            - `某Ref.current`\n        - 使用ref操作DOM\n            - `某Ref.current.focus();`\n- **useCallback**\n- **useMemo**\n\n- **custom Hooks**\n\n---\n\n- **reference**\n\n- https://www.explainthis.io/zh-hant/swe/what-is-react-hook\n- https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e\n- https://www.explainthis.io/zh-hant/swe/why-call-react-hook-top-level\n- https://israynotarray.com/react/20220930/3196189505/",
      "comment": [
        {
          "commentId": 4,
          "createdDate": "2023.March.23",
          "commentContent": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi optio impedit incidunt tempora assumenda ipsa aut hic similique nulla necessitatibus"
        }
      ]
    }
  ]
}
